//Código para extração dos dados do resumo de aço

const fs = require('fs');
const PDFDataExtract = require('pdfdataextract');

const pdfDataExtract = async (file) => {

	const file_data = fs.readFileSync(file);

	// Busca o data aguardando.
	try {
		const data_1 = await PDFDataExtract.PdfData.extract(file_data, {
			pages: 100,
			sort: true,
			verbosity: PDFDataExtract.VerbosityLevel.ERRORS,
			get: {
				pages: true,
				text: true,
				fingerprint: true,
				outline: true,
				metadata: true,
				info: true,
				permissions: true, // get permissions
			}
		});

		// Formata o objeto gauges a partir do data.

		let gauges = [];
		let data_text = ''
		data_1.text.forEach(txt => {
			txt += '\n';
			data_text += txt;
		});
		//console.log(data_text)
		//console.log(data_1.text)
		let lines = data_text.split('\n');
		console.log(lines)
		let id = 0;
		let esp = false;
		let open = false;
		let requestCode;
		let codePackingList;
		let listGauges = [];
		let listSteel = [];

		/*if (lines[0] != "Carteira de Pedidos por Cliente/Obra") {
			return "Documento não compatível!";
		}

		// Extraindo dados dos romaneios.
		for (let line of lines) {
			if (esp) {
				esp = false;
				let temp = line.split(' ');
				if (temp[0].includes('-')) {
					let i = temp[0].indexOf('-');
					requestCode = temp[0].slice(0, i);
				} else {
					requestCode = temp[0];
				};
			};
			if (line.includes('Localizador')) {
				esp = true;
				open = true; 
			};
			if (line.includes('Resumo Pedido')) {
				open = false;
			};
			if (open) {
				if (line.includes('CA50') || line.includes('CA60') || line.includes('CA25')) {
					id++;
					let temp = line.split(' ');
					if (!listGauges.includes(temp[0])) {
						listGauges.push(temp[0]);
						listSteel.push(temp[1]);
					} else {
						let n = 0;
						for (let c of listGauges) {
							if (c == temp[0]) {
								n++;
							};
						};
						let i = listGauges.indexOf(temp[0]);
						if (n == 1) {
							if (listSteel[i] != temp[1]) {
								listGauges.push(temp[0]);
								listSteel.push(temp[1]);	
							};
						
						} else if (n == 2) {
							let i_2 = listGauges.lastIndexOf(temp[0]);
							if (listSteel[i] != temp[1] && listSteel[i_2] != temp[1]) {
								listGauges.push(temp[0]);
								listSteel.push(temp[1]);	
							};
						};
					};
					gauges.push({
						"id": id,
						"romaneio": codePackingList,
						"aco": temp[1],
						"bitola": temp[0],
						"peso": Math.round(Number(temp[2].replace(',', '.')))
					});
				} else {
					if (line.includes(requestCode)) {
						let temp = line.split(' ');
						if (temp[0].includes('-')) {
							codePackingList = requestCode.replace('.', '') + temp[0][temp[0].length - 1];
						} else {
							codePackingList = requestCode.replace('.', '') + 'A';
						};	
					};
				};
			};
		};

		// Extraindo dados do resumo dos romaneios
		let totalWeight = 0;
		let summary = [];
		for (let c = 0; c < listGauges.length; c++) {
			listGauges[c] = {
				bitola: listGauges[c],
				aco: listSteel[c]
			};
		};
		listGauges.sort((a, b) => {
			if (Number(a.bitola.replace(',', '.')) < Number(b.bitola.replace(',', '.'))) {
				return -1;
			};
			if (Number(a.bitola.replace(',', '.')) > Number(b.bitola.replace(',', '.'))) {
				return 1;
			};
			return 0;
		});
		listGauges.forEach(element => {;
			id++;
			let weight = 0;
			gauges.forEach(g => {
				if (g.bitola == element.bitola) {
					weight += g.peso;
				}
			});
			totalWeight += weight;
			summary.push({
				"id": id,
				"romaneio": "Resumo",
				"aco": element.aco,
				"bitola": element.bitola,
				"peso": weight			
			});
		});*/

		return data_text//{gauges, summary, totalWeight};
	} catch (err) {
		console.log(`Ocorreu um erro durante o processo: ${err.message}`);
		return "Ocorreu um erro. Verifique o formato do arquivo.";
	};
};

(async () => {
	const test = await pdfDataExtract('arquives_test/Teste corte médio.pdf')
	console.log(test)
})()

module.exports = pdfDataExtract;